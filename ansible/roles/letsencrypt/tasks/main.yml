---
  - apt: update_cache=yes cache_valid_time=3600
    become: yes
    tags: install

  - name: Install depends
    package: name={{ item }} state=present
    become: yes
    with_items:
      - python
      - python-dev
      - python-virtualenv
      - gcc
      - dialog
      - libaugeas0
      - libssl-dev
      - libffi-dev
      - ca-certificates
      - python-pip
      - git
    tags: install

  - include_vars: "{{ item }}"
    with_first_found:
      - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version | int }}.yml"
      - "../vars/{{ ansible_distribution }}.yml"
      - "../vars/{{ ansible_os_family }}.yml"
      - "../vars/default.yml"
    when: virtualenv_package_name is not defined
    tags: install

  - name: Install virtualenv
    package: name={{ item }} state=present
    become: yes
    with_items:
      - "{{ virtualenv_package_name }}"
    tags: install

  - name: Install python depends
    pip: virtualenv="{{ letsencrypt_venv }}" virtualenv_site_packages=no name={{ item }} state=latest virtualenv_python=python2
    become: yes
    with_items:
      - setuptools
      - pip
    tags: install

  - name: More python depends
    pip: virtualenv="{{ letsencrypt_venv }}" virtualenv_site_packages=no name=letsencrypt state=latest
    become: yes
    tags: install

  - stat:
      path: /etc/letsencrypt/live/{{ letsencrypt_cert_domains[0] }}
    register: cert_dir
    become: yes

  - block:
      - name: Ensure webroot exists
        file: path="{{ letsencrypt_webroot_path }}" state=directory

      - name: Attempt to get the certificate using the webroot authenticator
        command: "{{ letsencrypt_command }} -a webroot --webroot-path {{ letsencrypt_webroot_path }} certonly"
    when: letsencrypt_authenticator == "webroot" and not cert_dir.stat.exists
    become: yes

  - block: 
      - name: Stop nginx temporarily
        service:
          name: nginx
          state: stopped
      - name: Attempt to get the certificate using the standalone authenticator
        command: "{{ letsencrypt_command }} -a standalone auth"
    always:
      - name: Start nginx again
        service:
          name: nginx
          state: started
    when: letsencrypt_authenticator == "standalone" and not cert_dir.stat.exists
    become: yes

  - name: Fix the renewal file
    ini_file: section=renewalparams option={{ item.key }} value={{ item.value }} dest="/etc/letsencrypt/renewal/{{ letsencrypt_cert_domains[0] }}.conf"
    become: yes
    with_dict:
      os_packages_only: False
      verb: certonly
      noninteractive_mode: False
      uir: False
      hsts: False
      authenticator: '{{ letsencrypt_authenticator }}'

  - name: Fix the webroot map in the renewal file
    ini_file: section="[webroot_map]" option={{ item }} value={{ letsencrypt_webroot_path }} dest="/etc/letsencrypt/renewal/{{ letsencrypt_cert_domains[0] }}.conf"
    become: yes
    with_items: "{{ letsencrypt_cert_domains }}"

  - name: Install renewal cron
    become: yes
    cron: name="Let's Encrypt Renewal" day="{{ letsencrypt_renewal_frequency.day }}" hour="{{ letsencrypt_renewal_frequency.hour }}" minute="{{ letsencrypt_renewal_frequency.minute }}" job="{{ letsencrypt_venv }}/bin/letsencrypt renew {{ letsencrypt_renewal_command_args }} > /dev/null"
